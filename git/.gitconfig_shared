##################
# Personal Details
##################

[user]
  name  = Paul Schoenfelder
  email = paulschoenfelder@gmail.com

[github]
  user = bitwalker

##################
# General Settings
##################

[core]
  # Use vim for commit editing
  editor = vim

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile   = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Use the line endings of the source repo
  autocrlf = input

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[commit]
  template = ~/.gitmessage.txt

[push]
  default = current

[fetch]
  # Prune dead branches on fetch
  prune = true

[rerere]
  enabled = true

#################
# Grep
#################

[grep]
  lineNumber = true
  # default, basic, extended, fixed, perl
  patternType = perl
  # only used when patternType is default
  extendedRegexp = true

#################
# Log
#################

[log]
  # Use short hashes. Pass --no-abbrev-commit to disable
  abbrevCommit = true
  # default, short, local, iso, rfc, relative
  date = rfc
  # print short ref names, full prints the entire ref name
  decorate = short

#################
# Command Aliases
#################

[alias]
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Abbreviated status
  s  = status -s

  # Switch to a branch, creating it if necessary
  co = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Clone a repository including all submodules
  cloneall = clone --recursive

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Show the diff between the latest commit and the current state
  diffcwd = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  difflast = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View abbreviated SHA, description, relative date, and compact graph of the entire repo's history
  ll = log --graph --abbrev-commit --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  # Same as ll, but with full message body printed
  lll = log --graph --date=relative --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n%w(0,4,4)%-b%n%n%-N'

  # Commit all changes
  ca = !git add -A && git commit -av

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Remove all deleted files from git
  rmdead = !git-ls-files --deleted | xargs git rm

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Fetch a GitHub pull request
  fetchpr = "!f() { \n\
    if [ -z \"$2\" ]; then \n\
        repo="origin" \n\
        pr="$1" \n\
    else \n\
        repo="$1" \n\
        pr="$2" \n\
    fi \n\
    if [ $(printf \"%s\" \"$pr\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \n\
      git fetch $repo refs/pull/$pr/head:pr/$pr \n\
    else \n\
      printf "Invalid PR \"%s\"" "$pr"; return 1 \n\
    fi \n\
  }; f"

  # Merge GitHub pull request on top of the `master` branch
  #mergepr = "!f() { \
    #if git fetchpr $1 $2 ; then \n\
        #git checkout master && \
        #git merge --log -m "Closes #$1" pr/$1 && \
        #git branch -D pr/$1 \n\
    #fi \n\
  #}; f"

#################
# Colors
#################

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto
  grep = auto
  interactive = auto
  status = auto
  showbranch = auto

[color "branch"]
  current = yellow reverse
  local   = yellow bold
  remote  = green bold
  plain   = red bold

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old  = red          # deletions
  new  = green        # additions

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan


#######################
# Diff / Merge Options
#######################

[diff]
  # Detect copies as well as renames
  renames = copies
  renameLimit = 5000

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  renameLimit = 5000

[mergetool]
  keepBackup = false

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

####################
# URL Scheme Aliases
####################

[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"
